JP Bulman-Assigment 1

This program will print out the calendar for a given year using 5 methods: main, printMonthName, printMonth, printCalendar, and
startingDayOfYear.

	The method printMonthName takes in an int YearNumber and another int MonthNumber returns an int that is the number of days in the specified month. The body primarily consists of a switch statement which checks to see what month was passed in. It then prints the month, returns the number of days in the month, and finally breaks. The numbering system used is 1 for January, 2 for february, 3 for March, and so on. If any number that is not 1-12 is passed in, the switch's default is to return 999, which creates a strong outliar, indicating something went wrong. Although 11 out of the 12 months have a constant number of days which are independent of the year, February is an exception. If February is passed as the month, the method checks to see if the year is a leap year or a common year. If it is leap year, the method returns 29, and if it is common, it returns 28. The way it checks to see if the year passed is a leap year is first by seeing if the year is divisible by 4. If this is true, it then checks to see if it is not divisible by 100, if that is also true, then it is a leap year. Then, the method accounts for century leap years by checking if the year is divisble by 400, and if that is true, the year is a leap year. If none of these conditions are met, then the year is considered common and the method returns 28.
	
	The printMonth method in 3 parameters, the first being an int yearNumber, the second, an int monthNumber, and finally, an int startingDay. It processes the given information and then returns an int, which represents the day that the next month should start on. As well as the return, the method prints out days for the month starting on the day given by startingDay. The system I used for numbering the days was 0-Sunday,1-Monday,...,6-Saturday. The method first uses a for loop to print the first day of the month, I implemented this primarily because it made printing the rest of the days easier. Once the location of the first day was figured out, it was easy to print the rest of the days all in a standard fashion. After the loop for printing the first day finishes, the method moves on to the next for loop, which prints out the rest of the days of the month. This loop starts with the int currentNumberDay, which increases very iteration, and terminates when it is equal to the number of days in the given month. The loops then checks for various things about the day, it firsts sees if the day to be printed is at the start of the week, if so, it prints accordingly. The next thing it checks for is if the day is at the end of the week, if so, it prints the day and does a line break and resets the day of the week so that the next iteration has a Sunday. Finally, if it is not one of the edge cases in the week, it prints out the day standardly. After the loop is finished the end of the method is reached, which returns the currentDayOfTheWeek, which is the starting day of the next month. The invariant in the first for loop (the loop for the first day) is i increases by 1 and when the currentDayOfTheWeek is i, the day will be printed. The invariant of the second loop (the rest of the days of the month).
	
	The startingDayOfTheYear method takes in an int yearNumber and returns an int which represents the day the given year starts on. This method uses an algorithm I made myself with the knowledge that 1582 started on a Friday (that information came from: https://en.wikipedia.org/wiki/1582). Essentially, the idea is that in a given year X which has a starting day D, the next year, Y, will have a starting day D+1, unless the year X is a leap year, in which the starting day for Y is D+2. Since this is a fairly linear pattern, it was easy to make a loop that keeps track of the year and current day starting from 1582, and then working its way up (or down if the year is less than 1582) to the given year. Once finished, the method will then the day the given year should start on. The invariant of the loops is it checks to see if the day should be increased (or decreased) by 1 or 2.
	
	printCalendar takes in two parameters, the first being an int yearNumber, and the second being an int startingDay; the method is void and returns nothing. The method uses a for loop with a counter called currentMonth, which keeps track of the month to print. In the loop, the parameter startingDay is then mutated to printMonth(yearNumber,currentMonth,startingDay), which will allow the correct next day to be passed into the next iteration of the loop. The loop runs through twelve times printing out each month starting with Januray on the day passed in as startingDay. The invariant of the loop is currentMonth is increased by 1 and startingDay is mutated.
	
	Finally, main takes in nothing for parameters and then returns 0. The method prompts the user for a year, and then records the year given with scanf(). Once the year is recorded, it first checks to see if the year is <= 0, if so, it prints an error message and then quits out. If it is > 0, it then uses printCalendar with the year the user gave, and then startingDayOfTheYear method with the given year and then prints out the calendar as needed.
	
	
